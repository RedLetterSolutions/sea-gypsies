<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="https://use.typekit.net/tkz8vzf.css">
    <link rel="stylesheet" href="lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="css/app.css" />
    <link rel="icon" type="image/png" href="gallery/favicon/favicon.png" />
    <link href="SeaGypsies.styles.css" rel="stylesheet" />
    <HeadOutlet />
    <style>
        /* Loading screen color before Blazor mounts */
        html, body, #app {
            height: 100%;
            margin: 0;
        }
        #app {
            background: #256878;
        }
    </style>
</head>

<body>

    <!-- Ambient Music Player -->
    <audio id="ambientMusic" loop preload="auto">
        <source src="ambient_music.mp3" type="audio/mpeg">
        Your browser does not support the audio element.
    </audio>

    <!-- Music Control Button -->
    <button id="musicToggle" class="music-control" aria-label="Toggle ambient music">
        <svg id="musicIcon" class="music-icon playing" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <!-- Playing Icon (sound waves) -->
            <path class="wave-icon" d="M3 9V15M7 7V17M11 5V19M15 7V17M19 9V15" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            <!-- Paused Icon (pause bars) - hidden by default -->
            <g class="pause-icon" style="display: none;">
                <rect x="6" y="5" width="4" height="14" fill="currentColor"/>
                <rect x="14" y="5" width="4" height="14" fill="currentColor"/>
            </g>
        </svg>
    </button>

    <div class="page-container">
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <div class="page-wrapper">
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(BackgroundOnlyLayout)" />
                    <FocusOnNavigate RouteData="@routeData" Selector="h1" />
                </div>
            </Found>
            <NotFound>
                <PageTitle>The Sea Gypsies</PageTitle>
                <div class="home-container">

                </div>
            </NotFound>
        </Router>
    </div>

    <div id="blazor-error-ui">
        An unhandled error has occurred.
        <a href="." class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="device-detection.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/RedLetterSolutions/rls-contact-forms@main/rls-contact-api.min.js"></script>
    <script>
        // Initialize RLS Contact Form API (guard so other helpers still define even if CDN fails)
        try {
            if (window.RLSContact && typeof window.RLSContact.init === 'function') {
                window.RLSContact.init({ siteId: 'sea_gypsies' });
            } else {
                console.warn('[RLS] API not available at initial init');
            }
        } catch (e) {
            console.error('[RLS] Init error:', e);
        }

        // Minimal helper to (re)initialize RLS binding once when modal opens
        window.bindRLSOnce = function() {
            try {
                if (window.RLSContact && typeof window.RLSContact.init === 'function') {
                    window.RLSContact.init({ siteId: 'sea_gypsies' });
                }
            } catch (e) { console.error('[RLS] bind once error:', e); }
        }

        // JS <-> Blazor interop for closing the download form
        window.setDownloadFormPageRef = function(dotNetRef) {
            window.__downloadFormPageRef = dotNetRef;
        }
        window.closeDownloadFormFromJS = function() {
            if (window.__downloadFormPageRef) {
                window.__downloadFormPageRef.invokeMethodAsync('CloseDownloadFormFromJS');
            }
        }

        // Success handler for contact form (close modal after success)
        window.handleContactSuccess = function(result) {
            console.log('Contact form submitted successfully:', result);
            try {
                const form = document.getElementById('seaGypsiesForm');
                if (form) {
                    form.reset();
                }
            } catch {}
            // Close the modal via Blazor
            window.closeDownloadFormFromJS && window.closeDownloadFormFromJS();
            return true;
        };

        // Error handler for contact form
        window.handleContactError = function(error) {
            console.error('Contact form error:', error);
            alert('Error: ' + (error.message || 'Failed to send the script. Please try again.'));
            return false;
        };

        // Initialize the Sea Gypsies contact form (no rebind/retry; just prepare UI and combine name)
        window.initSeaGypsiesContactForm = function() {
            const form = document.getElementById('seaGypsiesForm');
            if (!form) {
                console.log('Form not found');
                return;
            }
            if (form.dataset.sgInit === '1') {
                console.log('Form already initialized (sgInit)');
                return;
            }
            form.dataset.sgInit = '1';

            // Avoid duplicate init when modal opens/closes repeatedly
            if (form.dataset.rlsInit === '1') {
                console.log('Form already initialized');
                if (window.bindRLSForms) window.bindRLSForms();
                return;
            }
            form.dataset.rlsInit = '1';

            console.log('Initializing Sea Gypsies contact form...');

            // Add submit event listener to combine first/last name before submission
            // Disable close/cancel while submitting and combine name before submit
            form.addEventListener('submit', function(e) {
                const firstName = document.getElementById('firstNameInput').value.trim();
                const lastName = document.getElementById('lastNameInput').value.trim();
                const hiddenName = document.getElementById('hiddenName');

                // Combine first and last name
                let fullName = `${firstName} ${lastName}`.trim();
                if (!fullName) {
                    fullName = 'Script Download Request';
                }

                hiddenName.value = fullName;
                console.log('Combined name:', fullName);
                // Disable cancel/close during submission
                try {
                    const cancelBtn = form.querySelector('.df-cancel');
                    const sendBtn = form.querySelector('.df-send');
                    const closeBtn = document.querySelector('.df-close');
                    if (cancelBtn) { cancelBtn.setAttribute('disabled', 'true'); cancelBtn.setAttribute('aria-disabled', 'true'); }
                    if (closeBtn) { closeBtn.setAttribute('disabled', 'true'); closeBtn.setAttribute('aria-disabled', 'true'); }
                    if (sendBtn) { sendBtn.setAttribute('aria-busy', 'true'); }
                } catch {}
            }, false);

            console.log('Form initialized successfully');
        };
    </script>
    <script>
        // Ambient Music Player
        window.initAmbientMusic = () => {
            const audio = document.getElementById('ambientMusic');
            const toggleBtn = document.getElementById('musicToggle');
            const musicIcon = document.getElementById('musicIcon');
            
            if (!audio || !toggleBtn) return;

            // Set initial volume
            audio.volume = 0.3;

            // Try to autoplay (may be blocked by browser)
            const playPromise = audio.play();
            
            if (playPromise !== undefined) {
                playPromise.then(() => {
                    // Autoplay started successfully
                    updateMusicIcon(true);
                }).catch((error) => {
                    // Autoplay was prevented
                    console.log('Autoplay prevented, user must interact first');
                    updateMusicIcon(false);
                });
            }

            // Toggle button click handler
            toggleBtn.addEventListener('click', () => {
                if (audio.paused) {
                    audio.play();
                    updateMusicIcon(true);
                } else {
                    audio.pause();
                    updateMusicIcon(false);
                }
            });

            function updateMusicIcon(isPlaying) {
                const waveIcon = musicIcon.querySelector('.wave-icon');
                const pauseIcon = musicIcon.querySelector('.pause-icon');
                
                if (isPlaying) {
                    musicIcon.classList.add('playing');
                    musicIcon.classList.remove('paused');
                    if (waveIcon) waveIcon.style.display = 'block';
                    if (pauseIcon) pauseIcon.style.display = 'none';
                } else {
                    musicIcon.classList.remove('playing');
                    musicIcon.classList.add('paused');
                    if (waveIcon) waveIcon.style.display = 'none';
                    if (pauseIcon) pauseIcon.style.display = 'block';
                }
            }

            // Listen for audio state changes
            audio.addEventListener('play', () => updateMusicIcon(true));
            audio.addEventListener('pause', () => updateMusicIcon(false));
        };

        // Initialize music player when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', window.initAmbientMusic);
        } else {
            window.initAmbientMusic();
        }

        // Home page layered background
        window.initHomeBackground = (defaultImage) => {
            const a = document.getElementById('homeBgA');
            const b = document.getElementById('homeBgB');
            if (!a || !b) return;
            a.style.backgroundImage = `url('${defaultImage}')`;
            a.style.opacity = '1';
            b.style.opacity = '0';
        };

        window.setHomeBackground = async (imageName) => {
            const a = document.getElementById('homeBgA');
            const b = document.getElementById('homeBgB');
            if (!a || !b) return;

            try { await window.preloadImage(imageName); } catch {}

            const aVisible = parseFloat(getComputedStyle(a).opacity || '0') > 0.5;
            const top = aVisible ? b : a;
            const bottom = aVisible ? a : b;

            const prevTopTransition = top.style.transition;
            const prevBottomTransition = bottom.style.transition;
            top.style.transition = 'none';
            bottom.style.transition = 'none';

            top.style.backgroundImage = `url('${imageName}')`;
            top.style.opacity = '1';
            bottom.style.opacity = '0';

            setTimeout(() => {
                top.style.transition = prevTopTransition;
                bottom.style.transition = prevBottomTransition;
            }, 0);
        };

        window.scrollThumbnailIntoView = (selectedIndex) => {
            const thumbnailScroll = document.getElementById('thumbnailScroll');
            if (!thumbnailScroll) return;

            const thumbnails = thumbnailScroll.querySelectorAll('.thumbnail');
            if (thumbnails.length <= selectedIndex) return;

            const selectedThumbnail = thumbnails[selectedIndex];
            if (selectedThumbnail) {
                selectedThumbnail.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center'
                });
            }
        };

        // Initialize double-layer background for crossfades
        window.initGalleryBackground = (defaultImage) => {
            const a = document.getElementById('galleryBgA');
            const b = document.getElementById('galleryBgB');
            if (!a || !b) return;
            a.style.backgroundImage = `url('${defaultImage}')`;
            a.style.opacity = '1';
            b.style.opacity = '0';
        };

        // Crossfade the background image without flicker
    window.setGalleryBackground = async (imageName) => {
            const a = document.getElementById('galleryBgA');
            const b = document.getElementById('galleryBgB');
            if (!a || !b) return;

            // Preload target first
            try {
                await window.preloadImage(imageName);
            } catch {}

            const aVisible = parseFloat(getComputedStyle(a).opacity || '0') > 0.5;
            const top = aVisible ? b : a;
            const bottom = aVisible ? a : b;

            // Disable transitions for an instantaneous swap
            const prevTopTransition = top.style.transition;
            const prevBottomTransition = bottom.style.transition;
            top.style.transition = 'none';
            bottom.style.transition = 'none';

            // Set next image on hidden layer and flip opacities instantly
            top.style.backgroundImage = `url('${imageName}')`;
            top.style.opacity = '1';
            bottom.style.opacity = '0';

            // Restore transitions (if any) after a tick
            setTimeout(() => {
                top.style.transition = prevTopTransition;
                bottom.style.transition = prevBottomTransition;
            }, 0);
        };

        window.preloadImage = (imageUrl) => {
            return new Promise((resolve, reject) => {
                const img = new Image();
                img.onload = () => resolve(img);
                img.onerror = () => reject(new Error(`Failed to load image: ${imageUrl}`));
                img.src = imageUrl;
            });
        };

        window.preloadImages = (imageUrls) => {
            if (!Array.isArray(imageUrls)) return Promise.resolve();
            return Promise.allSettled(imageUrls.map(url => window.preloadImage(url)));
        };

        // Library page layered background
        window.initLibraryBackground = (defaultImage) => {
            const a = document.getElementById('libraryBgA');
            const b = document.getElementById('libraryBgB');
            if (!a || !b) return;
            a.style.backgroundImage = `url('${defaultImage}')`;
            a.style.opacity = '1';
            b.style.opacity = '0';
        };

        window.setLibraryBackground = async (imageName) => {
            const a = document.getElementById('libraryBgA');
            const b = document.getElementById('libraryBgB');
            if (!a || !b) return;
            try { await window.preloadImage(imageName); } catch {}
            const aVisible = parseFloat(getComputedStyle(a).opacity || '0') > 0.5;
            const top = aVisible ? b : a;
            const bottom = aVisible ? a : b;
            const prevTopTransition = top.style.transition;
            const prevBottomTransition = bottom.style.transition;
            top.style.transition = 'none';
            bottom.style.transition = 'none';
            top.style.backgroundImage = `url('${imageName}')`;
            top.style.opacity = '1';
            bottom.style.opacity = '0';
            setTimeout(() => {
                top.style.transition = prevTopTransition;
                bottom.style.transition = prevBottomTransition;
            }, 0);
        };

        // Mobile navigation functionality
        let mobilePageComponent = null;

        window.addMobileMenuListener = (dotNetObjectRef) => {
            console.log('addMobileMenuListener called with:', dotNetObjectRef);
            mobilePageComponent = dotNetObjectRef;
        };

        // Function that can be called from the toggle button
        window.toggleMobileMenu = () => {
            console.log('toggleMobileMenu called');
            if (mobilePageComponent) {
                console.log('Invoking ToggleMenuFromJS on component');
                mobilePageComponent.invokeMethodAsync('ToggleMenuFromJS');
            } else {
                console.warn('No mobile page component registered');
            }
        };
    </script>

</body>

</html>

<style>
    /* Music Control Button */
    .music-control {
        position: fixed;
        bottom: 30px;
        right: 30px;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: rgba(0, 212, 255, 0.2);
        border: 2px solid #00d4ff;
        color: #00d4ff;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
        box-shadow: 0 4px 15px rgba(0, 212, 255, 0.3);
    }

    .music-control:hover {
        background: rgba(0, 212, 255, 0.3);
        border-color: #00ffff;
        box-shadow: 0 6px 20px rgba(0, 255, 255, 0.5);
        transform: scale(1.05);
    }

    .music-control:active {
        transform: scale(0.95);
    }

    .music-icon {
        width: 28px;
        height: 28px;
        transition: all 0.3s ease;
    }

    .music-icon.playing .wave-icon {
        animation: soundWave 1s ease-in-out infinite;
    }

    @@keyframes soundWave {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    /* Responsive positioning */
    @@media (max-width: 768px) {
        .music-control {
            bottom: 20px;
            right: 20px;
            width: 50px;
            height: 50px;
        }

        .music-icon {
            width: 24px;
            height: 24px;
        }
    }

    .page-container {
        position: fixed;
        inset: 0;
        overflow: hidden;
    }

    .page-wrapper {
        position: absolute;
        inset: 0;
        transition: transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        transform: translateX(0);
    }

    .page-wrapper.slide-left-enter {
        transform: translateX(-100%);
    }

    .page-wrapper.slide-left-enter-active {
        transform: translateX(0);
    }

    .page-wrapper.slide-right-enter {
        transform: translateX(100%);
    }

    .page-wrapper.slide-right-enter-active {
        transform: translateX(0);
    }

    .page-wrapper.slide-left-exit {
        transform: translateX(0);
    }

    .page-wrapper.slide-left-exit-active {
        transform: translateX(100%);
    }

    .page-wrapper.slide-right-exit {
        transform: translateX(0);
    }

    .page-wrapper.slide-right-exit-active {
        transform: translateX(-100%);
    }
</style>

<script>

        window.navigateWithTransition = function(url, direction) {
            if (direction) {
                sessionStorage.setItem('pageTransition', direction);
            }
            window.location.href = url;
        };

        window.applyPageTransition = function() {
            const direction = sessionStorage.getItem('pageTransition');
            if (direction) {
                sessionStorage.removeItem('pageTransition');
                const pageWrapper = document.querySelector('.page-wrapper');
                if (pageWrapper) {
                    // Start with the page off-screen
                    pageWrapper.style.transform = direction === 'left' ? 'translateX(-100%)' : 'translateX(100%)';
                    pageWrapper.style.transition = 'none';
                    
                    // Force a reflow then animate in
                    pageWrapper.offsetHeight;
                    
                    requestAnimationFrame(() => {
                        pageWrapper.style.transition = 'transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
                        pageWrapper.style.transform = 'translateX(0)';
                    });
                }
            }
        };

        // Apply transition when page loads
        document.addEventListener('DOMContentLoaded', function() {
            window.applyPageTransition();
        });

</script>

@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("applyPageTransition");
                await JSRuntime.InvokeVoidAsync("initAmbientMusic");
            }
            catch
            {
                // Ignore JS interop errors
            }
        }
    }
}
