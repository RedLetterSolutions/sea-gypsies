@page "/mobile/art"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Web

<PageTitle>The Sea Gypsies - Art Gallery</PageTitle>

<!-- Mobile Navigation Banner -->
<div class="mobile-navbar" id="deviceBanner">
    <button class="mobile-nav-toggle" id="mobileNavToggle" @onclick="ToggleMenu">
        <div class="hamburger-icon">
            <span></span>
            <span></span>
            <span></span>
        </div>
    </button>
    <span class="navbar-text">FOR BEST EXPERIENCE PLEASE VIEW ON A DESKTOP DEVICE</span>
</div>

<div class="viewport">
<div class="gallery-container">

    <!-- Mobile Navigation Menu -->
    <div class="nav-menu @(isMenuOpen ? "open" : "")">
        <div class="nav-overlay" @onclick="CloseMenu"></div>
        <div class="nav-content">
            <div class="nav-header">
                <h2>The Sea Gypsies</h2>
                <button class="nav-close" @onclick="CloseMenu">×</button>
            </div>
            <nav class="nav-links">
                <a href="/mobile" class="nav-link" @onclick="CloseMenu">
                    HOME
                </a>
                <a href="/mobile/library" class="nav-link" @onclick="CloseMenu">
                    LIBRARY
                </a>
                <a href="/mobile/art" class="nav-link active" @onclick="CloseMenu">
                    ART GALLERY
                </a>
            </nav>
        </div>
    </div>

    <div class="gallery-background">
        <div class="gallery-bg-layer" id="galleryBgA"></div>
        <div class="gallery-bg-layer" id="galleryBgB"></div>
    </div>

    <!-- Logo at top -->
    <div class="gallery-logo">
        <img src="logo.png" alt="The Sea Gypsies" class="logo-image" />
        <h1 class="gallery-title">THE GALLERY</h1>
    </div>

    <!-- Description text -->
    <div class="gallery-description">
        <p>Scroll through the collection of concept art and production design for the Sea Gypsies</p>
    </div>

    <!-- Main image display area -->
    <div class="main-image-container">
        <div class="main-image @(isShowingCredits ? "credits-hidden" : "")" id="mainImage">
            <img src="@selectedImageUrl" alt="Selected artwork" @onload="OnImageLoaded" @onerror="OnImageError" class="@imageLoadingClass" />
        </div>
    </div>

    @* Mobile-only popup overlay for credits *@
    @if (isShowingCredits)
    {
        <div class="credits-overlay" @onclick="HideCredits">
            <div class="credits-modal" @onclick:stopPropagation="true">
                <div class="credits-panel">
                    <p>
                       To help bring The Sea Gypsies to life, I worked closely with Joe Incorvaia, a colleague and talented art director, to work on the concept art. We started with nothing more than pencil sketches and ideas but rather than go down the traditional route, we decided to leverage the Midjourney and Runway AI generation tools to provide us with elements and environments we then carefully crafted into the vision I had for The Sea Gypsies. 
These animations were then edited together by Mosheer Nader, with music and audio designed by Gordon Miller
                    </p>
                    <a href="/desktop/art" class="credits-learn-more">To learn more about THE SEA GYPSIES, please click here</a>
                    <p><span style="color: white;">Credits:</span>
                    <br/>
                    <br/>
                    <span style="color: white;">Samual Mondragona</span>: Creative Direction design composition with AI Imagery and video generation <a href="https://www.artifexscripts.com">https://www.artifexscripts.com</a>
                    <br/>
                    <br/>
                    <span style="color: white;">Joe Incorvaia</span>: Art Direction and AI image creation - <a href="https://sites.google.com/view/jincorvaia-ai/home">https://sites.google.com/view/jincorvaia-ai/home</a> 
                    <br/>
                    <br/>
                    <span style="color: white;">Mosheer Nader</span>: Animation design and composition - <a href="https://mosheer.com">https://mosheer.com</a>
                    <br/>
                    <br/>
                    <span style="color: white;">Gordon Miller</span>: Music and audio design composition - <a href="mailto:gordon@gmail.com">gordon@gmail.com</a>
                    <br/>
                    <br/>
                    <span style="color: white;">Red Letter Solutions</span>: Website production and support -  <a href="https://redlettersolutions.io">https://redlettersolutions.io</a>
                    </p>
                </div>
            </div>
        </div>
    }

    <!-- Navigation buttons disabled on mobile - use hamburger menu and thumbnails instead -->

    <!-- Home button -->
    <div class="home-button-container">
        <button class="home-button" @onclick="NavigateToHome">
            <img src="/library/mobile/mobile_home.png" alt="Home" />
        </button>
    </div>

    <!-- Thumbnail scroll area (bottom section) -->
    <div class="thumbnail-container">
        <div class="thumbnail-scroll" id="thumbnailScroll" @onwheel="HandleThumbnailScroll" @onwheel:preventDefault="true">
            @for (int i = 0; i < galleryImages.Count; i++)
            {
                int index = i; // Capture for closure
                <div class="thumbnail @((!isShowingCredits && index == selectedIndex) ? "selected" : "")"
                     @onclick="() => SelectImage(index)">
                    <img src="@galleryImages[index].ThumbnailUrl" alt="@galleryImages[index].Title" />
                    <div class="thumbnail-color-overlay"></div>
                    <div class="thumbnail-overlay">
                        <img src="thumbnail_overlay.png" alt="View" />
                    </div>
                </div>
            }
            <!-- Credits tile as the last item -->
            <div class="thumbnail credits @(isShowingCredits ? "selected" : "")" @onclick="ShowCredits">
                <div class="credits-tile">
                    <div class="credits-icon">ℹ</div>
                    <div class="credits-label">CREDITS</div>
                </div>
                <div class="thumbnail-color-overlay"></div>
            </div>
        </div>
    </div>
</div>
</div>

<style>
    html, body, #app {
        height: 100%;
        margin: 0;
        padding: 0;
        background: #000; /* letterbox color */
        overflow: hidden;
        position: fixed; /* Prevent any scrolling behavior */
        width: 100%;
    }

    .viewport {
        position: fixed;
        inset: 0;
        overflow: hidden;
        /* Space for global navbar and clear dynamic browser bottom bar */
        --mobile-bottom-pad: calc(env(safe-area-inset-bottom) + 14px);
        padding: 60px env(safe-area-inset-right) var(--mobile-bottom-pad) env(safe-area-inset-left);
        /* Overflow background so letterboxing shows image instead of black */
        background-color: #000; /* Fallback */
        background-image: url('/gallery/backgrounds/mobile_background.jpg');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }

    .gallery-container {
        position: relative;
        width: 100vw;
        height: calc(100dvh - 60px - var(--mobile-bottom-pad));
        /* Reusable stage height for internal layout to avoid 50vh overlap issues */
        --stage-height: calc(100dvh - 60px - var(--mobile-bottom-pad));
        overflow: hidden;
        background: #000; /* Fallback background */
    }

    .gallery-background {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
        background: #000; /* Ensure consistent background */
    }

    .gallery-bg-layer {
        position: absolute;
        inset: 0;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        opacity: 0;
        transition: none;
    }

    /* Gallery Logo */
    .gallery-logo {
        position: absolute;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 3;
        text-align: center;
    }

    .gallery-logo .logo-image {
        width: 100%;
        max-width: 250px;
        height: auto;
        opacity: 0.9;
        filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.3));
    }

    .gallery-logo .gallery-title {
        color: #ffffff;
        font-family: 'apotek-comp', sans-serif;
        font-size: 20px;
        font-weight: 400;
        letter-spacing: 10px;
        @* margin: 8px 0 0 0; *@
        text-align: center;
        text-shadow: 0 2px 8px rgba(0, 0, 0, 0.8);
    }

    /* Gallery Description */
    .gallery-description {
        position: absolute;
        top: 12vh;
        left: 5%;
        width: 90%;
        z-index: 3;
        text-align: center;
    }

    .gallery-description p {
        color: #67f6ff;
        font-family: 'apotek-comp', sans-serif;
        font-size: 20px;
        font-weight: 200;
        margin: 0 0 1px 0;
        padding: 0 10px;
        line-height: 1.4;
        text-shadow: 0 2px 8px rgba(0, 0, 0, 0.8);
    }

    .main-image-container {
        position: absolute;
        left: 5%;
        top: 145px; /* Below description text */
        width: 90%;
        height: calc(var(--stage-height) / 2 - 85px); /* Use stage height instead of 50vh */
        z-index: 2;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .main-image {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .main-image.credits-hidden {
        opacity: 0;
        transition: none;
    }

    .main-image img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        border-radius: 4px;
        transition: opacity 0.3s ease-in-out;
        opacity: 1;
    }

    .main-image img.loading {
        opacity: 0;
    }

    /* Mobile-only credits popup overlay */
    .credits-overlay {
        position: fixed;
        inset: 0;
        z-index: 10002;
        background: rgba(0,0,0,0.6);
        backdrop-filter: blur(2px);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .credits-modal {
        max-width: 920px;
        width: 100%;
        max-height: 85vh;
        display: flex;
        align-items: stretch;
        justify-content: center;
    }

    /* Credits panel shown in place of the image */
    .credits-panel {
        position: absolute;
        top: 0; bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 92%; /* align with desktop visual and keep within bounds */
        z-index: 2;
        display: flex;
        flex-direction: column;
        gap: 10px;
        color: #49abbd;
        background: transparent; /* base stays transparent; modal override below adds subtle bg */
        border: none; /* no border */
        border-radius: 0;
        padding: 8px 0; /* minimal padding */
        box-shadow: none; /* no shadow */
        overflow: auto;
    }

    /* Override credits panel when shown inside popup overlay */
    .credits-overlay .credits-panel {
        position: relative;
        top: auto; bottom: auto; left: auto;
        transform: none;
        width: 92%;
        max-height: 80vh;
        padding: 20px 24px;
        z-index: 1;
        background: linear-gradient(
            180deg,
            rgba(2, 15, 18, 0.88) 0%,
            rgba(12, 35, 41, 0.88) 100%
        );
        border: 1px solid rgba(103, 246, 255, 0.25);
        border-radius: 8px;
        box-shadow: 0 6px 24px rgba(0,0,0,0.4);
    }

    /* Match desktop typography/colors */
    .credits-panel p {
        font-family: 'apotek-comp', sans-serif;
        text-align: center;
        font-size: 25px;
        letter-spacing: 0.5px;
        line-height: 1.1;
        color: #49abbd;
    }

    .credits-panel a {
        color: white;
        text-decoration: underline;
    }

    /* Styled CTA link copied from desktop */
    .credits-learn-more {
        font-family: 'apotek-comp', sans-serif;
        color: white !important;
        text-decoration: none;
        background-color: black;
        border-color: white;
        text-decoration: none !important;
        border-width: 1px;
        padding: 8px 10px;
        border-style: solid;
        align-self: center;
        display: inline-block;
        font-size: 15px;
        letter-spacing: 0.5px;
    }

    /* Close button removed per requirements */

    /* Credits thumbnail tile */
    .thumbnail.credits {
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(12, 35, 41, 0.55);
        min-width: 100px;
        min-height: 100px;
    }

    .credits-tile {
        text-align: center;
        user-select: none;
    }

    .credits-icon {
        font-size: 24px;
        line-height: 1;
        color: #ffffff;
        text-shadow: 0 2px 8px rgba(0,0,0,0.45);
    }

    .credits-label {
        margin-top: 6px;
        font-family: 'apotek-comp', sans-serif;
        font-size: 12px;
        letter-spacing: 3px;
        color: #67f6ff;
    }

    .thumbnail-container {
        position: absolute;
        left: 5%;
        bottom: 10px; /* Reset to original bottom positioning */
        width: 90%;
        height: calc(var(--stage-height) / 2 - 90px); /* Match top section using stage height */
        z-index: 2;
    }

    .thumbnail-scroll {
        width: 100%;
        height: 100%;
        overflow-x: auto;
        overflow-y: hidden;
        display: flex;
        gap: 12px;
        padding: 8px;
        box-sizing: border-box;
        scroll-behavior: smooth;
    }

    .thumbnail {
        flex: 0 0 auto;
        width: 100px;
        height: 100px;
        cursor: pointer;
        border: 2px solid rgba(255,255,255,0.15);
        border-radius: 8px;
        transition: border-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
        background: rgba(0, 0, 0, 0.35);
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        box-shadow: 0 0 0 0 rgba(255,255,255,0);
    }

    .thumbnail:hover {
        border-color: rgba(255, 255, 255, 0.35);
        transform: scale(1.05);
    }

    .thumbnail.selected {
        border-color: rgba(255,255,255,0.75);
        box-shadow: 0 0 6px 2px rgba(255,255,255,0.25);
    }

    .thumbnail img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 4px;
    }

    .thumbnail-color-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: #0c2329;
        opacity: 0.3;
        pointer-events: none;
        z-index: 3;
        border-radius: 4px;
        transition: opacity 0.2s ease;
    }

    .thumbnail:hover .thumbnail-color-overlay {
        opacity: 0.2;
    }

    .thumbnail-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        pointer-events: none;
        z-index: 5;
        opacity: 0.8;
        transition: opacity 0.2s ease;
    }

    .thumbnail:hover .thumbnail-overlay {
        opacity: 1;
    }

    .thumbnail-overlay img {
        width: 30px;
        height: 30px;
        object-fit: contain;
    }

    /* Custom scrollbar for thumbnails */
    .thumbnail-scroll::-webkit-scrollbar {
        height: 6px;
    }

    .thumbnail-scroll::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
    }

    .thumbnail-scroll::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.4);
        border-radius: 3px;
    }

    .thumbnail-scroll::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.6);
    }

    /* Home Button */
    .home-button-container {
        position: absolute;
        bottom: 20px; /* Position in bottom half of page */
        left: 50%;
        transform: translateX(-50%);
        z-index: 100;
        pointer-events: auto; /* Ensure it can receive clicks */
    }

    .home-button {
        background: none;
        border: none;
        padding: 0;
        cursor: pointer;
        transition: all 0.3s ease;
        opacity: 0.9;
        position: relative;
        z-index: 100;
        touch-action: manipulation;
    }

    .home-button img {
        height: 50px;
        width: auto;
        display: block;
        pointer-events: none;
    }

    .home-button:hover {
        opacity: 1;
        transform: translateY(-3px);
        filter: drop-shadow(0 4px 12px rgba(103, 246, 255, 0.5));
    }

    /* Navigation buttons removed on mobile - using hamburger menu and thumbnails instead */

    /* Navigation Menu */
    .nav-menu {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 10001;
        pointer-events: none;
        transition: all 0.3s ease;
    }

    .nav-menu.open {
        pointer-events: all;
    }

    .nav-overlay {
        position: absolute;
        inset: 0;
        background: rgba(0, 0, 0, 0.6);
        opacity: 0;
        transition: opacity 0.3s ease;
        backdrop-filter: blur(4px);
    }

    .nav-menu.open .nav-overlay {
        opacity: 1;
    }

    .nav-content {
        position: absolute;
        top: 0;
        left: -100%;
        width: 280px;
        height: 100%;
        background: linear-gradient(135deg, rgba(2, 15, 18, 0.98) 0%, rgba(12, 35, 41, 0.98) 100%);
        backdrop-filter: blur(20px);
        transition: left 0.3s ease;
        box-shadow: 4px 0 20px rgba(0, 0, 0, 0.5);
        border-right: 1px solid rgba(103, 246, 255, 0.3);
    }

    .nav-menu.open .nav-content {
        left: 0;
    }

    .nav-header {
        padding: 24px 20px;
        border-bottom: 1px solid rgba(103, 246, 255, 0.2);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .nav-header h2 {
        margin: 0;
        color: #67f6ff;
        font-family: 'apotek-comp', sans-serif;
        font-size: 20px;
        font-weight: 600;
        letter-spacing: 1px;
        text-transform: uppercase;
    }

    .nav-close {
        background: none;
        border: none;
        color: #67f6ff;
        font-size: 32px;
        cursor: pointer;
        padding: 0;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }

    .nav-close:hover {
        color: #fff;
        transform: rotate(90deg);
    }

    .nav-links {
        padding: 20px 0;
    }

    .nav-link {
        display: block;
        padding: 16px 24px;
        color: rgba(255, 255, 255, 0.8);
        text-decoration: none;
        font-family: 'apotek-comp', sans-serif;
        font-size: 16px;
        font-weight: 500;
        letter-spacing: 3px;
        text-transform: uppercase;
        transition: all 0.2s ease;
        border-left: 3px solid transparent;
    }

    .nav-link:hover {
        color: #67f6ff;
        background: rgba(103, 246, 255, 0.05);
        border-left-color: #67f6ff;
    }

    .nav-link.active {
        color: #67f6ff;
        background: rgba(103, 246, 255, 0.1);
        border-left-color: #67f6ff;
    }

    /* Mobile Navbar */
    .mobile-navbar {
        position: fixed;
        top: 0; left: 0; right: 0;
        background: rgba(2, 15, 18, 0.95);
        backdrop-filter: blur(10px);
        border-bottom: 1px solid rgba(103, 246, 255, 0.3);
        padding: 8px 16px;
        z-index: 10000;
        display: flex;
        height: 60px;
        align-items: center;
        justify-content: center;
        position: relative;
    }

    .mobile-nav-toggle {
        position: absolute;
        left: 16px;
        top: 50%;
        transform: translateY(-50%);
        background: #12506e;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        width: 44px;
        height: 44px;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        transition: all 0.3s ease;
        backdrop-filter: blur(15px);
        box-shadow: 0 4px 15px rgba(14, 165, 233, 0.3);
        overflow: hidden;
    }

    .mobile-nav-toggle:hover {
        transform: translateY(-50%) scale(1.05);
        box-shadow: 0 6px 20px rgba(14, 165, 233, 0.4);
    }

    .navbar-text {
         color: #67f6ff;
        font-family: 'apotek-comp', system-ui, -apple-system, sans-serif;
        font-size: 14px;
        letter-spacing: 3px;
        text-transform: uppercase;
        text-shadow: 0 0 8px rgba(103, 246, 255, 0.3);
        text-align: center;
        line-height: 1.2;
        margin: 0 60px;
    }

    .hamburger-icon {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        width: 20px;
        height: 14px;
        position: relative;
    }

    .hamburger-icon span {
        display: block;
        width: 100%;
        height: 2px;
        background: #fff;
        border-radius: 2px;
        transition: all 0.3s ease;
    }
</style>

@code {
    private int selectedIndex = 0;
    private string selectedImageUrl => galleryImages.Count > 0 ? galleryImages[selectedIndex].FullUrl : "";
    private bool isImageLoading = false;
    private string imageLoadingClass => isImageLoading ? "loading" : "";
    private bool isShowingCredits = false;
    private bool isMenuOpen = false;

    private List<GalleryImage> galleryImages = new List<GalleryImage>
    {
        new GalleryImage { Title = "Callisto Departs for Sea", ThumbnailUrl = "gallery/001 CALLISTO DEPARTS FOR SEA.jpg", FullUrl = "gallery/001 CALLISTO DEPARTS FOR SEA.jpg" },
        new GalleryImage { Title = "Callisto Departs for Sea (2)", ThumbnailUrl = "gallery/002 CALLISTO DEPARTS FOR SEA.jpg", FullUrl = "gallery/002 CALLISTO DEPARTS FOR SEA.jpg" },
        new GalleryImage { Title = "GPZ Buoys", ThumbnailUrl = "gallery/003 GPZ BUOYS 2 copy.jpg", FullUrl = "gallery/003 GPZ BUOYS 2 copy.jpg" },
        new GalleryImage { Title = "Callisto Trawls the Open Seas", ThumbnailUrl = "gallery/004 CALLISTO TRAWLS THE OPEN SEAS.jpg", FullUrl = "gallery/004 CALLISTO TRAWLS THE OPEN SEAS.jpg" },
        new GalleryImage { Title = "Nikki is Picked Up in the Nets", ThumbnailUrl = "gallery/005 NIIKI IS PICKED UP IN THE NETS.jpg", FullUrl = "gallery/005 NIIKI IS PICKED UP IN THE NETS.jpg" },
        new GalleryImage { Title = "Nikki in the Nets", ThumbnailUrl = "gallery/006 NIKKI IN THE NETS 2.jpg", FullUrl = "gallery/006 NIKKI IN THE NETS 2.jpg" },
        new GalleryImage { Title = "Callisto Water Geysers", ThumbnailUrl = "gallery/007 CALLISTO WATER GEYSERS 4.jpg", FullUrl = "gallery/007 CALLISTO WATER GEYSERS 4.jpg" },
        new GalleryImage { Title = "Callisto Water Geysers (1)", ThumbnailUrl = "gallery/008 CALLISTO WATER GEYSERS 1.jpg", FullUrl = "gallery/008 CALLISTO WATER GEYSERS 1.jpg" },
        new GalleryImage { Title = "Callisto Water Geysers (2)", ThumbnailUrl = "gallery/009 CALLISTO WATER GEYSERS 2.jpg", FullUrl = "gallery/009 CALLISTO WATER GEYSERS 2.jpg" },
        new GalleryImage { Title = "Callisto Water Geysers (3)", ThumbnailUrl = "gallery/010 CALLISTO WATER GEYSERS 3.jpg", FullUrl = "gallery/010 CALLISTO WATER GEYSERS 3.jpg" },
        new GalleryImage { Title = "Eyes in the Water", ThumbnailUrl = "gallery/011 EYES IN THE WATER 1.jpg", FullUrl = "gallery/011 EYES IN THE WATER 1.jpg" },
        new GalleryImage { Title = "Eyes in the Water (3)", ThumbnailUrl = "gallery/012 EYES IN THE WATER 3.jpg", FullUrl = "gallery/012 EYES IN THE WATER 3.jpg" },
        new GalleryImage { Title = "Nikki Awakens", ThumbnailUrl = "gallery/013 NIKKI AWAKENS 3.jpg", FullUrl = "gallery/013 NIKKI AWAKENS 3.jpg" },
        new GalleryImage { Title = "Nikki Looks Over the Railing", ThumbnailUrl = "gallery/014 NIKKI LOOKS OVER THE RAILING 1.jpg", FullUrl = "gallery/014 NIKKI LOOKS OVER THE RAILING 1.jpg" },
        new GalleryImage { Title = "Nikki Looks Over the Railing (3)", ThumbnailUrl = "gallery/015. NIKKI LOOKS OVER THE RAILING 3.jpg", FullUrl = "gallery/015. NIKKI LOOKS OVER THE RAILING 3.jpg" },
        new GalleryImage { Title = "Nikki Looks Over the Railing (4)", ThumbnailUrl = "gallery/016 NIKKI LOOKS OVER THE RAILING 4.jpg", FullUrl = "gallery/016 NIKKI LOOKS OVER THE RAILING 4.jpg" },
        new GalleryImage { Title = "Nikki Swims Underwater", ThumbnailUrl = "gallery/017 NIKKI SWIMS UNDERWATER copy.jpg", FullUrl = "gallery/017 NIKKI SWIMS UNDERWATER copy.jpg" },
        new GalleryImage { Title = "Sea Gypsies Attack the Callisto", ThumbnailUrl = "gallery/018 SEA GYPSIES ATTACK THE CALLISTO 1.jpg", FullUrl = "gallery/018 SEA GYPSIES ATTACK THE CALLISTO 1.jpg" },
        new GalleryImage { Title = "Nikki Flies Underwater", ThumbnailUrl = "gallery/019 NIKKI FLIES UNDERWATER.jpg", FullUrl = "gallery/019 NIKKI FLIES UNDERWATER.jpg" },
        new GalleryImage { Title = "Sea Gypsies Attack the Callisto (2)", ThumbnailUrl = "gallery/020 SEA GYPSIES ATTACK THE CALLISTO 2.jpg", FullUrl = "gallery/020 SEA GYPSIES ATTACK THE CALLISTO 2.jpg" },
        new GalleryImage { Title = "Underwater Graveyard", ThumbnailUrl = "gallery/021 UNDERWATER GRAVEYARD 1.jpg", FullUrl = "gallery/021 UNDERWATER GRAVEYARD 1.jpg" },
        new GalleryImage { Title = "Underwater Graveyard (2)", ThumbnailUrl = "gallery/022 UNDERWATER GRAVEYARD.jpg", FullUrl = "gallery/022 UNDERWATER GRAVEYARD.jpg" },
        new GalleryImage { Title = "Underwater Graveyard Aquabots", ThumbnailUrl = "gallery/023 UNDERWATER GRAVEYARD AQUABOTS SPOILER.jpg", FullUrl = "gallery/023 UNDERWATER GRAVEYARD AQUABOTS SPOILER.jpg" },
        new GalleryImage { Title = "Nikki Schematic Master", ThumbnailUrl = "gallery/025 NIKKI SCHEMATIC MASTER FINAL.jpg", FullUrl = "gallery/025 NIKKI SCHEMATIC MASTER FINAL.jpg" }
    };

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Initialize crossfade layers and set mobile background
                await JSRuntime.InvokeVoidAsync("initGalleryBackground", "gallery/backgrounds/mobile_background.jpg");

                // Preload background images
                var bgImages = new[]
                {
                    "gallery/backgrounds/mobile_background.jpg"
                };
                await JSRuntime.InvokeVoidAsync("preloadImages", bgImages);

                // Connect to global navbar menu toggle
                await JSRuntime.InvokeVoidAsync("addMobileMenuListener", DotNetObjectReference.Create(this));
            }
            catch
            {
                // Ignore JS interop errors
            }
        }
    }

    private async Task SelectImage(int index)
    {
        if (isShowingCredits)
        {
            await HideCredits();
        }
        await ChangeImage(index);
    }

    private async Task PreviousImage()
    {
        if (isShowingCredits)
        {
            await HideCredits();
            return;
        }
        int newIndex;
        if (selectedIndex > 0)
        {
            newIndex = selectedIndex - 1;
        }
        else
        {
            newIndex = galleryImages.Count - 1; // Wrap to last image
        }
        await ChangeImage(newIndex);
    }

    private async Task NextImage()
    {
        if (isShowingCredits)
        {
            await HideCredits();
            await ChangeImage(0);
            return;
        }

        if (selectedIndex < galleryImages.Count - 1)
        {
            await ChangeImage(selectedIndex + 1);
        }
        else
        {
            await ShowCredits();
        }
    }

    private async Task ChangeImage(int newIndex)
    {
        if (newIndex == selectedIndex) return;

        isImageLoading = true;
        StateHasChanged();

        try
        {
            await JSRuntime.InvokeVoidAsync("preloadImage", galleryImages[newIndex].FullUrl);
            await Task.Delay(50);

            selectedIndex = newIndex;
            isImageLoading = false;
            isShowingCredits = false;
            StateHasChanged();

            await ScrollThumbnailIntoView();
        }
        catch
        {
            selectedIndex = newIndex;
            isImageLoading = false;
            isShowingCredits = false;
            StateHasChanged();
            await ScrollThumbnailIntoView();
        }
    }

    private void OnImageLoaded()
    {
        isImageLoading = false;
        StateHasChanged();
    }

    private void OnImageError()
    {
        isImageLoading = false;
        StateHasChanged();
    }

    private async Task ScrollThumbnailIntoView()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollThumbnailIntoView", selectedIndex);
        }
        catch
        {
            // Ignore JS interop errors
        }
    }

    private async Task ShowGalleryDefault()
    {
        await JSRuntime.InvokeVoidAsync("setGalleryBackground", "gallery/backgrounds/mobile_background.jpg");
    }

    private async Task ShowCredits()
    {
        isShowingCredits = true;
        await JSRuntime.InvokeVoidAsync("setGalleryBackground", "gallery/backgrounds/mobile_background.jpg");
        StateHasChanged();
    }

    private async Task HideCredits()
    {
        isShowingCredits = false;
        await JSRuntime.InvokeVoidAsync("setGalleryBackground", "gallery/backgrounds/mobile_background.jpg");
        StateHasChanged();
    }

    

    private void ToggleMenu()
    {
        isMenuOpen = !isMenuOpen;
    }

    [JSInvokable]
    public void ToggleMenuFromJS()
    {
        ToggleMenu();
        StateHasChanged();
    }

    private void CloseMenu()
    {
        isMenuOpen = false;
    }

    private async Task NavigateToHome()
    {
        try
        {
            // Use direct navigation with force reload to ensure it works
            Navigation.NavigateTo("/mobile", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Navigation error: {ex.Message}");
            // Fallback to JavaScript navigation
            try
            {
                await JSRuntime.InvokeVoidAsync("eval", "window.location.href = '/mobile'");
            }
            catch
            {
                // Last resort - use href
                await JSRuntime.InvokeVoidAsync("eval", "document.location = '/mobile'");
            }
        }
    }

    private async Task HandleThumbnailScroll(WheelEventArgs e)
    {
        try
        {
            // Horizontal scroll with mouse wheel
            var scrollAmount = e.DeltaY * 2; // Multiply by 2 for faster scrolling
            await JSRuntime.InvokeVoidAsync("eval", $@"
                const container = document.getElementById('thumbnailScroll');
                if (container) {{
                    container.scrollLeft += {scrollAmount};
                }}
            ");
        }
        catch
        {
            // Ignore JS errors
        }
    }

    public class GalleryImage
    {
        public string Title { get; set; } = "";
        public string ThumbnailUrl { get; set; } = "";
        public string FullUrl { get; set; } = "";
    }
}