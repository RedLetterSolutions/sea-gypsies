@page "/"
@rendermode InteractiveServer

<PageTitle>The Sea Gypsies</PageTitle>

<div id="loading" class="loading-screen">
    <div class="loading-content">
        <div class="spinner"></div>
        <p>Detecting device...</p>
    </div>
</div>

<style>
    .loading-screen {
        position: fixed;
        inset: 0;
        background: #256878;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
    }

    .loading-content {
        text-align: center;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 16px auto;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .loading-content p {
        margin: 0;
        font-size: 14px;
        opacity: 0.8;
    }
</style>

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Detect if mobile device using dedicated function
                var isMobile = await JSRuntime.InvokeAsync<bool>("detectMobileDevice");

                if (isMobile)
                {
                    Navigation.NavigateTo("/mobile", forceLoad: true);
                }
                else
                {
                    Navigation.NavigateTo("/desktop", forceLoad: true);
                }
            }
            catch (Exception ex)
            {
                // Log error and fallback to screen size check
                Console.WriteLine($"Device detection error: {ex.Message}");
                try
                {
                    // Fallback: check screen width only
                    var isSmallScreen = await JSRuntime.InvokeAsync<bool>("eval", "window.innerWidth <= 768");
                    Navigation.NavigateTo(isSmallScreen ? "/mobile" : "/desktop", forceLoad: true);
                }
                catch
                {
                    // Final fallback to desktop
                    Navigation.NavigateTo("/desktop", forceLoad: true);
                }
            }
        }
    }
}