@page "/desktop/library"
@rendermode InteractiveServer
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web

<PageTitle>The Sea Gypsies - Library</PageTitle>

<div class="viewport">
  <div class="library-container">
    <div class="library-background">
      <div class="library-bg-layer" id="libraryBgA"></div>
      <div class="library-bg-layer" id="libraryBgB"></div>
    </div>

    <!-- Invisible hotspots for hover areas -->
    <div class="hotspot read-hotspot"
      @onmouseenter="ShowReadHover"
      @onmouseleave="ShowDefault"
      @onclick="OpenScript"></div>

    <div class="hotspot download-hotspot"
         @onmouseenter="ShowDownloadHover"
         @onmouseleave="ShowDefault"
         @onclick="ShowDownloadForm"></div>

    <div class="hotspot watch-hotspot"
         @onmouseenter="ShowWatchHover"
         @onmouseleave="ShowDefault"
         @onclick="OpenVideo"></div>

    <div class="hotspot home-hotspot"
         @onmouseenter="ShowHomeHover"
         @onmouseleave="ShowDefault"
         @onclick="NavigateHome"></div>


    <!-- Default Content Area -->
    @if (!showScript && !showVideo)
    {
      <div class="@DefaultContentAreaClass">
        <div class="video-placeholder">
          <img src="library/video_placeholder.png" alt="Video Placeholder" class="placeholder-image" />
          <button class="script-button" @onclick="OpenScript">
            <img src="library/click_to_read_script.png" alt="Click to Read Script" />
          </button>
        </div>
      </div>
    }

    <!-- Popup Content Areas -->
    @if (showScript)
    {
      <div class="@ContentAreaClass">
        <button class="content-close" @onclick="CloseContent" aria-label="Close">×</button>
        <!-- Reverted: use browser's native PDF viewer directly -->
        <iframe class="content-pdf" src="@scriptUrl" title="Script PDF"></iframe>
        <div class="pdf-fallback"><a href="@scriptUrl" target="_blank" rel="noopener">Open PDF in new tab</a></div>
        <button class="download-script-btn" @onclick="ShowDownloadForm">Download Script</button>
      </div>
    }

    @if (showVideo)
    {
      <div class="@ContentAreaClass">
        <button class="content-close" @onclick="CloseContent" aria-label="Close">×</button>
        <video class="content-video" controls preload="metadata" playsinline poster="library/video_placeholder.png" title="Sea Gypsies Trailer">
          <source src="library/TSG_Trailer_V3.mp4" type="video/mp4">
          Your browser does not support the video tag.
        </video>
      </div>
    }

    <SeaGypsies.Pages.Desktop.DownloadScriptForm
      IsOpen="@showDownloadForm"
      BackgroundUrl="/library/SEA GYPSIES WEBSITE  CONTACT FORM.png"
      OnSubmit="@HandleFormSubmit"
      OnCancel="@HideDownloadForm" />
  </div>
</div>

<style>
  html, body, #app {
    height: 100%;
    margin: 0;
    padding: 0;
    background: #000; /* letterbox */
    overflow: hidden;
  }

  .viewport {
    position: fixed;
    inset: 0;
    display: grid;
    place-items: center;
    padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);
  }

  .library-container {
    position: relative;
    width: min(100vw, calc(100vh * 16 / 9));
    height: min(calc(100vw * 9 / 16), 100vh);
    aspect-ratio: 16 / 9;
    overflow: hidden;
    /* Tunable placement for the content area relative to this 16:9 container */
  --content-left: 35.5%; /* +5% more to the right */
  --content-top: 24.0%;  /* +5% more down */
    --content-width: 58.5%;
    --content-height: 58%;
  }

  .library-background { position: absolute; inset: 0; z-index: 1; }
  .library-bg-layer {
    position: absolute;
    inset: 0;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    opacity: 0;
    transition: none; /* instant swap */
  }

  .hotspot {
    position: absolute;
    cursor: pointer;
    z-index: 10;
  }
  /* Left area – Read the Script */
  .read-hotspot { left: 3.91%; top: 16.67%; width: 26.72%; height: 3.70%; }
  /* Download the Script area */
  .download-hotspot { left: 3.18%; top: 57.87%; width: 26.62%; height: 5.46%; }
  /* Watch the Video area */
  .watch-hotspot { left: 7.08%; top: 73.24%; width: 18.23%; height: 18.52%; }
  /* Home spot – align with Gallery page location */
  .home-hotspot { left: 1.3%; top: 90.13%; width: 60px; height: 60px; }

  /* Content area with specific bounds */
  .content-area {
    position: absolute;
    /* Positioned as percentages relative to the 16:9 container */
    left: var(--content-left);
    top: var(--content-top);
    width: var(--content-width);
    height: var(--content-height);
    z-index: 20;
  background: rgba(2, 15, 18, 0.82);
  border: none;
    border-radius: 8px;
    color: #e7f6fb;
    padding: 12px;
    box-sizing: border-box;
    display: grid;
  }
  .content-close {
    position: absolute; top: 6px; right: 8px; border: none; background: transparent; color: #fff; font-size: 26px; cursor: pointer; line-height: 1;
  }
  .placeholder { align-self: center; justify-self: center; text-align: center; padding: 8px 12px; }
  .content-iframe { width: 100%; height: 100%; border: 0; border-radius: 4px; }
  .content-pdf { width: 100%; height: 100%; border: 0; border-radius: 4px; background: #0a0f12; }
  .content-video { width: 100%; height: 100%; border: 0; border-radius: 4px; background: #000; object-fit: contain; }
  .pdf-fallback { position: absolute; bottom: 6px; right: 10px; font-size: 12px; opacity: 0.8; }

  /* Dev-only outline helper to visualize the content area bounds */
  .dev-outline {
    outline: 2px solid rgba(79, 209, 255, 0.9);
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.4);
  }

  .download-script-btn {
    position: absolute;
    bottom: 6px;
    left: 10px;
    background: rgba(14, 165, 233, 0.9);
    color: #fff;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .download-script-btn:hover {
    background: rgba(14, 165, 233, 1);
  }

  /* Default Content Area */
  .default-content {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .video-placeholder {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .placeholder-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 4px;
  }

  .script-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: transparent;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 2;
  }

  .script-button:hover {
    transform: translate(-50%, -50%) scale(1.05);
    filter: brightness(1.1);
  }

  .script-button img {
    display: block;
    max-width: 100%;
    height: auto;
  }

  /* Top-right contact button */
  

</style>

@code {
  [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
  [Inject] private NavigationManager Navigation { get; set; } = default!;

  private bool showScript = false;
  private bool showVideo = false;
  private bool showDownloadForm = false;
  private string scriptUrl = "library/SEA GYPSIES COMPLETE SCRIPT MASTER.pdf";

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      try
      {
        await JSRuntime.InvokeVoidAsync("initLibraryBackground", "library/library_default.png");
        var imgs = new[] {
          "library/library_default.png",
          "library/library_read_script.png",
          "library/library_download_script.png",
          "library/library_home.png"
        };
        await JSRuntime.InvokeVoidAsync("preloadImages", imgs);
        // Auto-open contact form if requested via query string (from top-right button on other pages)
        if (Navigation.Uri.Contains("openContact=1", StringComparison.OrdinalIgnoreCase))
        {
          showDownloadForm = true;
          StateHasChanged();
        }
      }
      catch { }
    }
  }

  // Build URL for embedded PDF.js viewer shipped in wwwroot/library/viewer.html
  private string PdfViewerUrl => $"library/viewer.html?file={Uri.EscapeDataString(scriptUrl)}";

  // Dev outline toggle via query params: ?outline=1 or ?debug=1
  private bool DevOutline => Navigation.Uri.Contains("outline=1", StringComparison.OrdinalIgnoreCase)
                          || Navigation.Uri.Contains("debug=1", StringComparison.OrdinalIgnoreCase);
  private string ContentAreaClass => $"content-area{(DevOutline ? " dev-outline" : string.Empty)}";
  private string DefaultContentAreaClass => $"content-area default-content{(DevOutline ? " dev-outline" : string.Empty)}";

  // Do not change the background on "Read the Script" hover
  private Task ShowReadHover() => Task.CompletedTask;
  private async Task ShowDownloadHover() => await JSRuntime.InvokeVoidAsync("setLibraryBackground", "library/library_download_script.png");
  private async Task ShowWatchHover() => await JSRuntime.InvokeVoidAsync("setLibraryBackground", "library/library_default.png");
  private async Task ShowHomeHover() => await JSRuntime.InvokeVoidAsync("setLibraryBackground", "library/library_home.png");
  private async Task ShowDefault() => await JSRuntime.InvokeVoidAsync("setLibraryBackground", "library/library_default.png");

  private void OpenScript() { showVideo = false; showScript = true; }
  private void OpenVideo() { showScript = false; showVideo = true; }
  private void CloseContent() { showScript = false; showVideo = false; }

  private void ShowDownloadForm()
  {
    showDownloadForm = true;
  }

  private void HideDownloadForm()
  {
    showDownloadForm = false;
  }

  private async Task HandleFormSubmit(DownloadScriptForm.FormModel model)
  {
    try
    {
      // TODO: Add backend API call here to send the script via email
      await SimulateEmailSending();

      // Show success message (for now just hide the form)
      HideDownloadForm();

      // TODO: Show success notification to user
      await ShowSuccessMessage();
    }
    catch
    {
      // TODO: Handle errors - maybe expose an error state in the form component
    }
  }

  private async Task SimulateEmailSending()
  {
    // Simulate API call delay
    await Task.Delay(2000);
  }

  private async Task ShowSuccessMessage()
  {
    try
    {
      await JSRuntime.InvokeVoidAsync("alert", "Script sent successfully! Please check your email.");
    }
    catch
    {
      // Fallback if JS alert fails
    }
  }

  private async Task NavigateHome() => await JSRuntime.InvokeVoidAsync("navigateWithTransition", "/desktop", "right");
}
