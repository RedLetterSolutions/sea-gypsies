@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components

@if (IsOpen)
{
  <div class="df-overlay" @onclick="HandleOverlayClick">
    <div class="df-container" @onclick:stopPropagation="true">
      <button class="df-close" @onclick="OnCancel" aria-label="Close">
        <img src="/button_icon.png" alt="" />
      </button>

      <div class="df-content">
        <h1 class="df-title">DOWNLOAD THE SCRIPT</h1>
        <p class="df-subtitle">Enter your information to receive the script via email:</p>

        <EditForm Model="model" OnValidSubmit="SubmitInternal">
          <DataAnnotationsValidator />
          
          <div class="df-form">
            <div class="df-field">
              <label class="df-label">
                <span class="df-label-text">FIRST NAME</span>
                <span class="df-optional">(OPTIONAL)</span>
              </label>
              <input class="df-input" type="text" placeholder="ENTER FIRST NAME"
                     @bind="model.FirstName" autocomplete="given-name" />
            </div>

            <div class="df-field">
              <label class="df-label">
                <span class="df-label-text">LAST NAME</span>
                <span class="df-optional">(OPTIONAL)</span>
              </label>
              <input class="df-input" type="text" placeholder="ENTER LAST NAME"
                     @bind="model.LastName" autocomplete="family-name" />
            </div>

            <div class="df-field">
              <label class="df-label">
                <span class="df-label-text">EMAIL ADDRESS</span>
              </label>
              <input class="df-input" type="email" placeholder="ENTER EMAIL ADDRESS" required
                     @bind="model.Email" autocomplete="email" />
            </div>

            @if (!string.IsNullOrEmpty(Error))
            {
              <div class="df-error">@Error</div>
            }

            <div class="df-button-row">
              <button type="submit" class="df-btn df-send" aria-label="Send Script" disabled="@isSubmitting">
                <img src="/button_icon.png" alt="" class="df-btn-icon" />
                SEND SCRIPT
              </button>
              <button type="button" class="df-btn df-cancel" aria-label="Cancel" @onclick="OnCancel">
                CANCEL
              </button>
            </div>
          </div>
        </EditForm>
      </div>
    </div>
  </div>
}

@code {
  [Parameter] public bool IsOpen { get; set; }
  [Parameter] public EventCallback<FormModel> OnSubmit { get; set; }
  [Parameter] public EventCallback OnCancel { get; set; }
  [Inject] private NavigationManager Nav { get; set; } = default!;

  private bool isSubmitting;
  private string Error = string.Empty;
  private FormModel model = new();

  private async Task SubmitInternal()
  {
    Error = string.Empty;
    if (string.IsNullOrWhiteSpace(model.Email))
    {
      Error = "Email address is required.";
      return;
    }

    isSubmitting = true;
    try
    {
      await OnSubmit.InvokeAsync(model);
    }
    finally
    {
      isSubmitting = false;
    }
  }

  private async Task HandleOverlayClick()
  {
    await OnCancel.InvokeAsync();
  }

  public class FormModel
  {
    public string FirstName { get; set; } = string.Empty;
    public string LastName  { get; set; } = string.Empty;
    public string Email     { get; set; } = string.Empty;
  }
}

<style>
  /* Fullscreen overlay with semi-transparent background */
  .df-overlay {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    display: grid;
    place-items: center;
    z-index: 1000;
    backdrop-filter: blur(8px);
  }

  /* Form container - recreating the cyan-bordered design */
  .df-container {
    position: relative;
    width: clamp(600px, 50vw, 768px);
    background: rgba(0, 0, 0, 0.7);
    border: 3px solid #00d4ff;
    box-shadow: 
      0 0 20px rgba(0, 212, 255, 0.4),
      inset 0 0 40px rgba(0, 212, 255, 0.05);
    padding: 0;
  }

  /* Close button - top right with custom icon */
  .df-close {
    position: absolute;
    top: 16px;
    right: 16px;
    background: transparent;
    border: none;
    color: #00d4ff;
    cursor: pointer;
    z-index: 2;
    padding: 0;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  .df-close:hover {
    color: #00ffff;
    transform: scale(1.1);
  }

  .df-close svg {
    width: 100%;
    height: 100%;
  }

  /* Content area with padding */
  .df-content {
    padding: 60px 80px 50px 80px;
  }

  /* Title styling */
  .df-title {
    font-family: 'apotek', sans-serif;
    font-size: clamp(24px, 2.5vw, 32px);
    font-weight: 700;
    letter-spacing: 0.4em;
    color: #ffffff;
    margin: 0 0 16px 0;
    text-align: left;
  }

  /* Subtitle */
  .df-subtitle {
    font-family: 'apotek', sans-serif;
    font-size: clamp(20px, 1.1vw, 14px);
    color: #00d4ff;
    margin: 0 0 40px 0;
    text-align: left;
  }

  /* Form layout */
  .df-form {
    display: flex;
    flex-direction: column;
    gap: 24px;
  }

  /* Field group */
  .df-field {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  /* Label styling */
  .df-label {
    font-family: 'apotek', sans-serif;
    font-size: clamp(11px, 1vw, 13px);
    font-weight: 600;
    letter-spacing: 0.08em;
    color: #ffffff;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .df-label-text {
    color: #ffffff;
    letter-spacing: 0.3em;
  }

  .df-optional {
    color: #00d4ff;
    font-weight: 400;
  }

  /* Input field styling */
  .df-input {
    width: 100%;
    background: rgba(0, 0, 0, 0.6);
    border: 2px solid #00d4ff;
    color: #00d4ff;
    font-family: 'apotek', sans-serif;
    font-size: clamp(13px, 1.2vw, 16px);
    font-weight: 500;
    letter-spacing: 0.05em;
    padding: 16px 20px;
    box-sizing: border-box;
    outline: none;
    transition: all 0.2s ease;
  }

  .df-input::placeholder {
    color: rgba(0, 212, 255, 0.5);
    font-weight: 400;
  }

  .df-input:focus {
    background: rgba(0, 0, 0, 0.8);
    border-color: #00ffff;
    box-shadow: 
      0 0 10px rgba(0, 255, 255, 0.3),
      inset 0 0 10px rgba(0, 255, 255, 0.1);
  }

  /* Error message */
  .df-error {
    color: #ff4444;
    font-family: 'apotek', sans-serif;
    font-size: 12px;
    margin-top: -12px;
  }

  /* Button row */
  .df-button-row {
    display: flex;
    gap: 20px;
    margin-top: 16px;
  }

  /* Button base styles */
  .df-btn {
    font-family: 'apotek', sans-serif;
    font-size: clamp(13px, 1.2vw, 15px);
    font-weight: 700;
    letter-spacing: 0.12em;
    padding: 14px 28px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    border: 2px solid;
  }

  /* Send button */
  .df-send {
    background: #00d4ff;
    color: #ffffff;
    border-color: #00d4ff;
    flex: 0 0 auto;
  }

  .df-send:hover:not(:disabled) {
    background: #00ffff;
    border-color: #00ffff;
    box-shadow: 0 0 15px rgba(0, 255, 255, 0.5);
    transform: translateY(-1px);
  }

  .df-send:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .df-btn-icon {
    width: 20px;
    height: 20px;
  }

  /* Cancel button */
  .df-cancel {
    background: transparent;
    color: #00d4ff;
    border-color: #00d4ff;
    flex: 0 0 auto;
  }

  .df-cancel:hover {
    background: rgba(0, 212, 255, 0.1);
    border-color: #00ffff;
    color: #00ffff;
  }

  /* Responsive adjustments */
  @@media (max-width: 768px) {
    .df-content {
      padding: 40px 40px 30px 40px;
    }

    .df-button-row {
      flex-direction: column;
    }

    .df-btn {
      width: 100%;
    }
  }

  @@media (max-width: 480px) {
    .df-container {
      width: 95vw;
      max-width: 95vw;
    }

    .df-content {
      padding: 30px 24px;
    }
  }
</style>