@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components

@if (IsOpen)
{
  <div class="df-overlay" @onclick="HandleOverlayClick">
    <div class="df-container" @onclick:stopPropagation="true">
      <button class="df-close" @onclick="OnCancel" aria-label="Close">
        <img src="/button_icon.png" alt="" />
      </button>

      <div class="df-content">
        <h1 class="df-title">DOWNLOAD THE SCRIPT</h1>
        <p class="df-subtitle">Enter your information to receive the script via email:</p>

  <form data-rls-contact="sea_gypsies" data-rls-redirect="false" id="seaGypsiesForm" data-rls-on-success="handleContactSuccess" data-rls-on-error="handleContactError">
          <!-- Honeypot (spam protection) -->
          <input type="text" name="_hp" style="display:none;" tabindex="-1" autocomplete="off">

          <!-- Hidden message field -->
          <input type="hidden" name="message" value="Please send me the Sea Gypsies script.">

          <!-- Hidden combined name field -->
          <input type="hidden" name="name" id="hiddenName" value="">

          <div class="df-form">
            <div class="df-field">
              <label class="df-label">
                <span class="df-label-text">FIRST NAME</span>
                <span class="df-optional">(OPTIONAL)</span>
              </label>
              <input class="df-input" type="text" placeholder="ENTER FIRST NAME"
                     id="firstNameInput" autocomplete="given-name">
            </div>

            <div class="df-field">
              <label class="df-label">
                <span class="df-label-text">LAST NAME</span>
                <span class="df-optional">(OPTIONAL)</span>
              </label>
              <input class="df-input" type="text" placeholder="ENTER LAST NAME"
                     id="lastNameInput" autocomplete="family-name">
            </div>

            <div class="df-field">
              <label class="df-label">
                <span class="df-label-text">EMAIL ADDRESS</span>
              </label>
              <input class="df-input" type="email" placeholder="ENTER EMAIL ADDRESS"
                     name="email" autocomplete="email" required>
            </div>

            <div class="df-button-row">
              <button type="submit" class="df-btn df-send" aria-label="Send Script">
                <img src="/button_icon.png" alt="" class="df-btn-icon" />
                <span>SEND SCRIPT</span>
              </button>
              <button type="button" class="df-btn df-cancel" aria-label="Cancel" @onclick="OnCancel">
                CANCEL
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
}

@code {
  [Parameter] public bool IsOpen { get; set; }
  [Parameter] public EventCallback OnCancel { get; set; }
  [Inject] private NavigationManager Nav { get; set; } = default!;
  [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
  private bool _initForOpen;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (IsOpen && !_initForOpen)
    {
      try
      {
        await JSRuntime.InvokeVoidAsync("initSeaGypsiesContactForm");
        await JSRuntime.InvokeVoidAsync("bindRLSOnce");
        _initForOpen = true;
      }
      catch (Exception ex)
      {
        Console.WriteLine($"Error initializing form: {ex.Message}");
      }
    }
    else if (!IsOpen && _initForOpen)
    {
      _initForOpen = false; // reset for next open
    }
  }

  private async Task HandleOverlayClick()
  {
    await OnCancel.InvokeAsync();
  }
}

<style>
  /* Fullscreen overlay with semi-transparent background */
  .df-overlay {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    display: grid;
    place-items: center;
    z-index: 1000;
    backdrop-filter: blur(8px);
    /* Add safe margins so the form doesn't touch the top bar or bottom FAB on mobile */
    padding: calc(env(safe-area-inset-top) + 20px) 16px calc(env(safe-area-inset-bottom) + 28px) 16px;
  }

  /* Form container - recreating the cyan-bordered design */
  .df-container {
    position: relative;
    width: clamp(600px, 50vw, 768px);
    background: rgba(0, 0, 0, 0.7);
    border: 3px solid #00d4ff;
    box-shadow:
      0 0 20px rgba(0, 212, 255, 0.4),
      inset 0 0 40px rgba(0, 212, 255, 0.05);
    padding: 0;
    font-family: 'apotek-comp', system-ui, -apple-system, sans-serif;
    /* Ensure the form never exceeds the viewport and can scroll internally on small devices */
    max-height: calc(100dvh - (env(safe-area-inset-top) + 20px) - (env(safe-area-inset-bottom) + 28px) - 32px);
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }

  /* Close button - top right with custom icon */
  .df-close {
    position: absolute;
    top: 16px;
    right: 16px;
    background: transparent;
    border: none;
    color: #00d4ff;
    cursor: pointer;
    z-index: 2;
    padding: 0;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  .df-close:hover {
    color: #00ffff;
    transform: scale(1.1);
  }

  .df-close svg {
    width: 100%;
    height: 100%;
  }

  /* Content area with padding */
  .df-content {
    padding: 60px 80px 50px 80px;
  }

  /* Title styling */
  .df-title {
    font-family: 'apotek-comp', system-ui, -apple-system, sans-serif;
    font-size: clamp(32px, 3vw, 40px);
    font-weight: 100;
    letter-spacing: 15px;
    text-transform: uppercase;
    color: #ffffff;
    margin: 0 0 5px 0;
    text-align: left;
  }

  /* Subtitle */
  .df-subtitle {
    font-family: 'apotek-comp', system-ui, -apple-system, sans-serif;
    font-size: clamp(16px, 1.5vw, 25px);
    font-weight: 300;
    letter-spacing: 3px;
    color: #00d4ff;
    margin: 0 0 40px 0;
    text-align: left;
  }

  /* Form layout */
  .df-form {
    font-family: 'apotek-comp', system-ui, -apple-system, sans-serif;
    display: flex;
    flex-direction: column;
    gap: 24px;
  }

  /* Field group */
  .df-field {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  /* Label styling */
  .df-label {
    font-family: 'apotek-comp', system-ui, -apple-system, sans-serif;
    font-size: clamp(10px, 1.5vw, 25px);
    font-weight: 300;
    letter-spacing: 10px;
    text-transform: uppercase;
    color: #ffffff;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .df-label-text {
    font-family: 'apotek-comp', system-ui, -apple-system, sans-serif;
    color: #ffffff;
    letter-spacing: 10px;
    text-transform: uppercase;
  }

  .df-optional {
    font-family: 'apotek-comp', system-ui, -apple-system, sans-serif;
    color: #00d4ff;
    font-weight: 300;
    letter-spacing: 6px;
    text-transform: uppercase;
  }

  /* Input field styling */
  .df-input {
    width: 100%;
    background: rgba(0, 0, 0, 0.6);
    border: 2px solid #00d4ff;
    color: #00d4ff;
    font-family: 'apotek-comp', system-ui, -apple-system, sans-serif;
    font-size: clamp(15px, 1.4vw, 18px);
    font-weight: 300;
    letter-spacing: 3px;
    text-transform: uppercase;
    padding: 16px 20px;
    box-sizing: border-box;
    outline: none;
    transition: all 0.2s ease;
  }

  .df-input::placeholder {
    font-family: 'apotek-comp', system-ui, -apple-system, sans-serif;
    color: rgba(0, 212, 255, 0.5);
    font-weight: 300;
    letter-spacing: 3px;
    text-transform: uppercase;
  }

  .df-input:focus {
    background: rgba(0, 0, 0, 0.8);
    border-color: #00ffff;
    box-shadow: 
      0 0 10px rgba(0, 255, 255, 0.3),
      inset 0 0 10px rgba(0, 255, 255, 0.1);
  }

  /* Error message */
  .df-error {
    color: #ff4444;
    font-family: 'apotek-comp', system-ui, -apple-system, sans-serif;
    font-size: 12px;
    letter-spacing: 1px;
    margin-top: -12px;
  }

  /* Button row */
  .df-button-row {
    display: flex;
    gap: 20px;
    margin-top: 16px;
  }

  /* Button base styles */
  .df-btn {
    font-family: 'apotek-comp', system-ui, -apple-system, sans-serif;
    font-size: clamp(15px, 1.4vw, 17px);
    font-weight: 400;
    letter-spacing: 4px;
    text-transform: uppercase;
    padding: 14px 28px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    border: 2px solid;
  }

  /* Send button */
  .df-send {
    background: #34818e;
    color: #ffffff;
    border-color: #00d4ff;
    font-weight: 300;
    letter-spacing: 8px;
    flex: 0 0 auto;
  }

  .df-send:hover:not(:disabled) {
    background: #00ffff;
    border-color: #00ffff;
    box-shadow: 0 0 15px rgba(0, 255, 255, 0.5);
    transform: translateY(-1px);
  }

  .df-send:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .df-btn-icon {
    width: 20px;
    height: 20px;
  }

  /* Cancel button */
  .df-cancel {
    background: transparent;
    color: #12506e;
    border-color: #12506e;
    font-weight: 300;
    letter-spacing: 6px;
    margin-left: auto;
    flex: 0 0 auto;
  }

  .df-cancel:hover {
    background: rgba(0, 212, 255, 0.1);
    border-color: #00ffff;
    color: #00ffff;
  }

  /* Responsive adjustments */
  @@media (max-width: 768px) {
    /* tighten overall layout and add a touch more outer padding on smaller screens */
    .df-overlay {
      padding: calc(env(safe-area-inset-top) + 24px) 16px calc(env(safe-area-inset-bottom) + 36px) 16px;
    }

    .df-container {
      /* leave a little more headroom/footroom on mid-size mobiles */
      max-height: calc(100dvh - (env(safe-area-inset-top) + 24px) - (env(safe-area-inset-bottom) + 36px) - 24px);
      width: 90vw;
      max-width: 560px;
    }

    .df-content {
      padding: 24px 20px 16px 20px;
    }

    .df-form { gap: 16px; }
    .df-field { gap: 6px; }

    .df-input { padding: 12px 16px; }

    .df-button-row { margin-top: 8px; }

    .df-btn { padding: 12px 18px; }

    .df-subtitle { margin: 0 0 20px 0; }

    /* Reduce label letter-spacing ~50% on mobile/tablet */
    .df-title { letter-spacing: 5px; }
    .df-subtitle { letter-spacing: 2px; }
    .df-label { letter-spacing: 5px; font-size: clamp(18px, 2vw, 25px); }
    .df-label-text { letter-spacing: 5px; }
    .df-optional { letter-spacing: 3px; }
    .df-send { letter-spacing: 4px; font-size: clamp(20px, 1.5vw, 30px); }

    .df-button-row {
      flex-direction: column;
    }

    .df-btn {
      width: 100%;
    }
  }

  @@media (max-width: 480px) {
    .df-container {
      width: 90vw;
      max-width: 90vw;
      /* extra breathing room on very small screens */
      max-height: calc(100dvh - (env(safe-area-inset-top) + 28px) - (env(safe-area-inset-bottom) + 44px) - 16px);
    }

    .df-content {
      padding: 20px 16px 14px 16px;
    }

    .df-form { gap: 14px; }
    .df-input { padding: 10px 14px; }
    .df-btn { padding: 10px 16px; }
    .df-button-row { gap: 12px; margin-top: 8px; }
    .df-subtitle { margin: 0 0 16px 0; }

    /* Keep the reduced spacing on smaller phones as well */
    .df-label { letter-spacing: 5px; }
    .df-label-text { letter-spacing: 5px; }
    .df-optional { letter-spacing: 3px; }
  }
</style>