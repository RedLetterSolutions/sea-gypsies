@page "/desktop/art"
@rendermode InteractiveServer
@using SeaGypsies.Components

<PageTitle>The Sea Gypsies - Art Gallery</PageTitle>

<div class="viewport">
<div class="gallery-container">
    <div class="gallery-background">
        <div class="gallery-bg-layer" id="galleryBgA"></div>
        <div class="gallery-bg-layer" id="galleryBgB"></div>
    </div>
    
    <!-- Main image display area (left 2/3) -->
    <div class="main-image-container">
        <div class="main-image @(isShowingCredits ? "credits-hidden" : "")" id="mainImage">
            <img src="@selectedImageUrl" alt="Selected artwork" @onload="OnImageLoaded" @onerror="OnImageError" class="@imageLoadingClass" />
        </div>
        @if (isShowingCredits)
        {
            <div class="credits-panel">
                <p>
                   To help bring The Sea Gypsies to life, I worked closely with Joe Incorvaia, a colleague and talented art director, to work on the concept art. We started with nothing more than pencil sketches and ideas but rather than go down the traditional route, we decided to leverage the Midjourney and Runway AI generation tools to provide us with elements and environments we then carefully crafted into the vision I had for The Sea Gypsies. 
These animations were then edited together by Mosheer Nader, with music and audio designed by Gordon Miller
                </p>
                <a href="/desktop/art" class="credits-learn-more">To learn more about THE SEA GYPSIES, please click here</a>
                <p><span style="color: white;">Credits:</span>
                <br/>
                <span style="color: white;">Samual Mondragona</span>: Creative Direction design composition with AI Imagery and video generation<a href="https://www.artifexscripts.com">https://www.artifexscripts.com</a>
                <br/>
                <span style="color: white;">Joe Incorvaia</span>: Art Direction and AI image creation - <a href="https://sites.google.com/view/jincorvaia-ai/home">https://sites.google.com/view/jincorvaia-ai/home</a> 
                <br/>
                <span style="color: white;">Mosheer Nader</span>: Animation design and composition - <a href="https://mosheer.com">https://mosheer.com</a>
                <br/>
                <span style="color: white;">Gordon Miller</span>: Music and audio design composition - <a href="mailto:gordon@gmail.com">gordon@gmail.com</a>
                <br/>
                <span style="color: white;">Red Letter Solutions</span>: Website production and support -  <a href="https://redlettersolutions.io">https://redlettersolutions.io</a>
                </p>
            </div>
        }
    </div>
    
    <!-- Navigation buttons -->
    <div class="nav-button back-button" 
         @onclick="PreviousImage"
         @onmouseenter="ShowBackHover" 
         @onmouseleave="ShowGalleryDefault"></div>
    <div class="nav-button next-button" 
         @onclick="NextImage"
         @onmouseenter="ShowNextHover" 
         @onmouseleave="ShowGalleryDefault"></div>
    <div class="nav-button home-button" 
         @onclick="NavigateHome"
         @onmouseenter="ShowHomeHover" 
         @onmouseleave="ShowGalleryDefault"></div>
    <div class="reset-button" 
         @onclick="ResetToFirstImage"
         @onmouseenter="ShowResetHover" 
         @onmouseleave="ShowGalleryDefault"></div>

    <ContactButton OnClick="OpenContact" />
    
    <!-- Thumbnail scroll area (right 1/3) -->
    <div class="thumbnail-container">
        <div class="thumbnail-scroll" id="thumbnailScroll">
            @for (int i = 0; i < galleryImages.Count; i++)
            {
                int index = i; // Capture for closure
                <div class="thumbnail @((!isShowingCredits && index == selectedIndex) ? "selected" : "")" 
                     @onclick="() => SelectImage(index)">
                    <img src="@galleryImages[index].ThumbnailUrl" alt="@galleryImages[index].Title" />
                    <div class="thumbnail-color-overlay"></div>
                    <div class="thumbnail-overlay">
                        <img src="thumbnail_overlay.png" alt="View" />
                    </div>
                </div>
            }
            <!-- Credits tile as the last item -->
            <div class="thumbnail credits @(isShowingCredits ? "selected" : "")" @onclick="ShowCredits">
                <div class="credits-tile">
                    <div class="credits-icon">â„¹</div>
                    <div class="credits-label">CREDITS</div>
                </div>
                <div class="thumbnail-color-overlay"></div>
            </div>
        </div>
    </div>
</div>
</div>

<style>
    html, body, #app {
        height: 100%;
        margin: 0;
        padding: 0;
        background: #000; /* letterbox color */
        overflow: hidden;
    }

    .viewport {
        position: fixed;
        inset: 0;
        display: grid;
        place-items: center;
        padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);
    }

    .gallery-container {
        position: relative;
        width: min(100vw, calc(100vh * 16 / 9));
        height: min(calc(100vw * 9 / 16), 100vh);
        aspect-ratio: 16 / 9;
        overflow: hidden;
    }

    .gallery-background {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
    }

    .gallery-bg-layer {
        position: absolute;
        inset: 0;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        opacity: 0;
        /* No transition for instant swaps */
        transition: none;
    }

    .main-image-container {
        position: absolute;
        left: 3.8%;
        top: 23.148%;
        width: 65%;
        height: 62%;
        z-index: 2;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .main-image {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(0, 0, 0, 0.1);
    }

    .main-image.credits-hidden {
        opacity: 0;
        transition: none;
    }

    .main-image img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        border-radius: 4px;
        transition: opacity 0.3s ease-in-out;
        opacity: 1;
    }

    .main-image img.loading {
        opacity: 0;
    }

    /* Credits panel shown in place of the image */
    .credits-panel {
        position: absolute;
        top: 0; bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 92%; /* slightly narrower than the image viewport */
        z-index: 2;
        display: flex;
        flex-direction: column;
        gap: 12px;
        color: #49abbd;
        background: transparent; /* no background */
        border: none; /* no border */
        border-radius: 0;
        padding: 8px 0; /* minimal padding */
        box-shadow: none; /* no shadow */
        overflow: auto;
    }

    .credits-learn-more {
        font-family: 'apotek-comp', sans-serif;
        color: white !important;
        text-decoration: none;
        background-color: black;
        border-color: white;
        text-decoration: none !important;
        border-width: 1px;
        padding: 8px 10px;
        border-style: solid;
        align-self: center;
        display: inline-block;
        font-size: 25px;
        letter-spacing: 0.5px;
    }

    .credits-panel p {
        font-family: 'apotek-comp', sans-serif;
        text-align: center;
        font-size: 25px;
        letter-spacing: 0.5px;
        line-height: 1.5;
        @* color: rgba(255,255,255,0.9); *@
        color: #49abbd;
    }

    .credits-panel a {
        color: white;
        text-decoration: underline;
    }

    .credits-panel ul {
        margin: 0 0 8px 20px;
    }

    /* Close button removed per requirements */

    /* Credits thumbnail tile */
    .thumbnail.credits {
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(12, 35, 41, 0.55);
    }

    .credits-tile {
        text-align: center;
        user-select: none;
    }

    .credits-icon {
        font-size: 28px;
        line-height: 1;
        color: #ffffff;
        text-shadow: 0 2px 8px rgba(0,0,0,0.45);
    }

    .credits-label {
        margin-top: 6px;
        font-family: 'apotek-comp', sans-serif;
        font-size: 14px;
        letter-spacing: 3px;
        color: #67f6ff;
    }

    .thumbnail-container {
        position: absolute;
        right: 3%;
        top: 5%;
        width: 22%;
        height: 85%;
        z-index: 2;
    }

    .thumbnail-scroll {
        width: 100%;
        height: 100%;
        overflow-y: auto;
        overflow-x: hidden;
        padding: 10px;
        box-sizing: border-box;
    }

    /* Thumbnails slightly reduced (85%) and centered within scroll column */
    .thumbnail {
        --thumb-scale: 0.85; /* adjust here to fine-tune size */
        --thumb-gap: 22px; /* vertical separation */
        width: calc(100% * var(--thumb-scale));
        aspect-ratio: 1;
        margin: 0 auto var(--thumb-gap) auto; /* increased spacing */
        cursor: pointer;
        border: 2px solid rgba(255,255,255,0.15); /* subtle base border */
        border-radius: 8px;
        transition: border-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
        background: rgba(0, 0, 0, 0.35);
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        box-shadow: 0 0 0 0 rgba(255,255,255,0); /* base shadow reset */
    }

    .thumbnail:hover {
        border-color: rgba(255, 255, 255, 0.35);
        transform: scale(1.02);
    }

    .thumbnail.selected {
        border-color: rgba(255,255,255,0.75);
        box-shadow: 0 0 6px 2px rgba(255,255,255,0.25);
    }

    .thumbnail img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 4px;
    }

    .thumbnail-color-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: #0c2329;
        opacity: 0.3;
        pointer-events: none;
        z-index: 3;
        border-radius: 4px;
        transition: opacity 0.2s ease;
    }

    .thumbnail:hover .thumbnail-color-overlay {
        opacity: 0.2;
    }

    .thumbnail-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        pointer-events: none;
        z-index: 5;
        opacity: 0.8;
        transition: opacity 0.2s ease;
    }

    .thumbnail:hover .thumbnail-overlay {
        opacity: 1;
    }

    .thumbnail-overlay img {
        width: 36px; /* enlarged from 24px */
        height: 36px; /* enlarged from 24px */
        object-fit: contain;
    }

    /* Custom scrollbar for thumbnails */
    .thumbnail-scroll::-webkit-scrollbar {
        width: 6px;
    }

    .thumbnail-scroll::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
    }

    .thumbnail-scroll::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.4);
        border-radius: 3px;
    }

    .thumbnail-scroll::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.6);
    }

    /* Navigation buttons */
    .nav-button {
        position: absolute;
        width: 60px;
        height: 60px;
        z-index: 10;
        cursor: pointer;
        border-radius: 50%;
        transition: all 0.2s ease;
    }

    .back-button {
        left: 5.20%;  /* 100px / 1920px = 5.20% */
        top: 17.2%;  /* 212px / 1080px = 19.63% */
    }

    .next-button {
        left: 63.8%;  /* 1225px / 1920px = 63.8% */
        top: 17.2%;  /* 221px / 1080px = 20.46% */
    }

    .home-button {
        left: 1.3%;  /* 57px / 1920px = 2.97% */
        top: 90.13%;  /* 995px / 1080px = 92.13% */
    }

    .nav-button:hover {
        background: transparent;
    }

    /* Reset button with custom dimensions */
    .reset-button {
        position: absolute;
        left: 78.91%;  /* 1515px / 1920px = 78.91% */
        top: 93.8%;   /* 1010px / 1080px = 93.52% */
        width: 12.08%; /* 232px / 1920px = 12.08% */
        height: 3.61%; /* 39px / 1080px = 3.61% */
        z-index: 10;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .reset-button:hover {
        background: transparent;
    }

    /* For debugging - uncomment to see button areas */
    /*
    .nav-button {
        border: 2px solid rgba(255, 255, 0, 0.8) !important;
        background: rgba(255, 255, 0, 0.3) !important;
    }
    */

    /* DEBUG MODE - Uncomment these lines to see positioning areas */
    /*
    .main-image-container {
        border: 3px solid rgba(255, 0, 0, 0.8) !important;
        background: rgba(255, 0, 0, 0.2) !important;
    }
    
    .thumbnail-container {
        border: 3px solid rgba(0, 255, 0, 0.8) !important;
        background: rgba(0, 255, 0, 0.2) !important;
    }
    */
</style>

@code {
    private int selectedIndex = 0;
    private string selectedImageUrl => galleryImages.Count > 0 ? galleryImages[selectedIndex].FullUrl : "";
    private bool isImageLoading = false;
    private string imageLoadingClass => isImageLoading ? "loading" : "";
    private bool isShowingCredits = false;

    private List<GalleryImage> galleryImages = new List<GalleryImage>
    {
        new GalleryImage { Title = "Callisto Departs for Sea", ThumbnailUrl = "gallery/001 CALLISTO DEPARTS FOR SEA.jpg", FullUrl = "gallery/001 CALLISTO DEPARTS FOR SEA.jpg" },
        new GalleryImage { Title = "Callisto Departs for Sea (2)", ThumbnailUrl = "gallery/002 CALLISTO DEPARTS FOR SEA.jpg", FullUrl = "gallery/002 CALLISTO DEPARTS FOR SEA.jpg" },
        new GalleryImage { Title = "GPZ Buoys", ThumbnailUrl = "gallery/003 GPZ BUOYS 2 copy.jpg", FullUrl = "gallery/003 GPZ BUOYS 2 copy.jpg" },
        new GalleryImage { Title = "Callisto Trawls the Open Seas", ThumbnailUrl = "gallery/004 CALLISTO TRAWLS THE OPEN SEAS.jpg", FullUrl = "gallery/004 CALLISTO TRAWLS THE OPEN SEAS.jpg" },
        new GalleryImage { Title = "Nikki is Picked Up in the Nets", ThumbnailUrl = "gallery/005 NIIKI IS PICKED UP IN THE NETS.jpg", FullUrl = "gallery/005 NIIKI IS PICKED UP IN THE NETS.jpg" },
        new GalleryImage { Title = "Nikki in the Nets", ThumbnailUrl = "gallery/006 NIKKI IN THE NETS 2.jpg", FullUrl = "gallery/006 NIKKI IN THE NETS 2.jpg" },
        new GalleryImage { Title = "Callisto Water Geysers", ThumbnailUrl = "gallery/007 CALLISTO WATER GEYSERS 4.jpg", FullUrl = "gallery/007 CALLISTO WATER GEYSERS 4.jpg" },
        new GalleryImage { Title = "Callisto Water Geysers (1)", ThumbnailUrl = "gallery/008 CALLISTO WATER GEYSERS 1.jpg", FullUrl = "gallery/008 CALLISTO WATER GEYSERS 1.jpg" },
        new GalleryImage { Title = "Callisto Water Geysers (2)", ThumbnailUrl = "gallery/009 CALLISTO WATER GEYSERS 2.jpg", FullUrl = "gallery/009 CALLISTO WATER GEYSERS 2.jpg" },
        new GalleryImage { Title = "Callisto Water Geysers (3)", ThumbnailUrl = "gallery/010 CALLISTO WATER GEYSERS 3.jpg", FullUrl = "gallery/010 CALLISTO WATER GEYSERS 3.jpg" },
        new GalleryImage { Title = "Eyes in the Water", ThumbnailUrl = "gallery/011 EYES IN THE WATER 1.jpg", FullUrl = "gallery/011 EYES IN THE WATER 1.jpg" },
        new GalleryImage { Title = "Eyes in the Water (3)", ThumbnailUrl = "gallery/012 EYES IN THE WATER 3.jpg", FullUrl = "gallery/012 EYES IN THE WATER 3.jpg" },
        new GalleryImage { Title = "Nikki Awakens", ThumbnailUrl = "gallery/013 NIKKI AWAKENS 3.jpg", FullUrl = "gallery/013 NIKKI AWAKENS 3.jpg" },
        new GalleryImage { Title = "Nikki Looks Over the Railing", ThumbnailUrl = "gallery/014 NIKKI LOOKS OVER THE RAILING 1.jpg", FullUrl = "gallery/014 NIKKI LOOKS OVER THE RAILING 1.jpg" },
        new GalleryImage { Title = "Nikki Looks Over the Railing (3)", ThumbnailUrl = "gallery/015. NIKKI LOOKS OVER THE RAILING 3.jpg", FullUrl = "gallery/015. NIKKI LOOKS OVER THE RAILING 3.jpg" },
        new GalleryImage { Title = "Nikki Looks Over the Railing (4)", ThumbnailUrl = "gallery/016 NIKKI LOOKS OVER THE RAILING 4.jpg", FullUrl = "gallery/016 NIKKI LOOKS OVER THE RAILING 4.jpg" },
        new GalleryImage { Title = "Nikki Swims Underwater", ThumbnailUrl = "gallery/017 NIKKI SWIMS UNDERWATER copy.jpg", FullUrl = "gallery/017 NIKKI SWIMS UNDERWATER copy.jpg" },
        new GalleryImage { Title = "Sea Gypsies Attack the Callisto", ThumbnailUrl = "gallery/018 SEA GYPSIES ATTACK THE CALLISTO 1.jpg", FullUrl = "gallery/018 SEA GYPSIES ATTACK THE CALLISTO 1.jpg" },
        new GalleryImage { Title = "Nikki Flies Underwater", ThumbnailUrl = "gallery/019 NIKKI FLIES UNDERWATER.jpg", FullUrl = "gallery/019 NIKKI FLIES UNDERWATER.jpg" },
        new GalleryImage { Title = "Sea Gypsies Attack the Callisto (2)", ThumbnailUrl = "gallery/020 SEA GYPSIES ATTACK THE CALLISTO 2.jpg", FullUrl = "gallery/020 SEA GYPSIES ATTACK THE CALLISTO 2.jpg" },
        new GalleryImage { Title = "Underwater Graveyard", ThumbnailUrl = "gallery/021 UNDERWATER GRAVEYARD 1.jpg", FullUrl = "gallery/021 UNDERWATER GRAVEYARD 1.jpg" },
        new GalleryImage { Title = "Underwater Graveyard (2)", ThumbnailUrl = "gallery/022 UNDERWATER GRAVEYARD.jpg", FullUrl = "gallery/022 UNDERWATER GRAVEYARD.jpg" },
        new GalleryImage { Title = "Underwater Graveyard Aquabots", ThumbnailUrl = "gallery/023 UNDERWATER GRAVEYARD AQUABOTS SPOILER.jpg", FullUrl = "gallery/023 UNDERWATER GRAVEYARD AQUABOTS SPOILER.jpg" },
        new GalleryImage { Title = "Nikki Schematic Master", ThumbnailUrl = "gallery/025 NIKKI SCHEMATIC MASTER FINAL.jpg", FullUrl = "gallery/025 NIKKI SCHEMATIC MASTER FINAL.jpg" }
    };

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Initialize crossfade layers and set default background
                await JSRuntime.InvokeVoidAsync("initGalleryBackground", "gallery/gallery_default.png");

                // Preload all hover background images to avoid flicker
                var bgImages = new[]
                {
                    "gallery/gallery_default.png",
                    "gallery/backgrounds/gallery_back_hover.png",
                    "gallery/backgrounds/gallery_next_hover.png",
                    "gallery/backgrounds/gallery_home_hover.png",
                    "gallery/backgrounds/gallery_reset_hover.png"
                };
                await JSRuntime.InvokeVoidAsync("preloadImages", bgImages);
            }
            catch
            {
                // Ignore JS interop errors
            }
        }
    }

    private async Task SelectImage(int index)
    {
        if (isShowingCredits)
        {
            await HideCredits();
        }
        await ChangeImage(index);
    }

    private async Task PreviousImage()
    {
        if (isShowingCredits)
        {
            await HideCredits();
            return;
        }
        int newIndex;
        if (selectedIndex > 0)
        {
            newIndex = selectedIndex - 1;
        }
        else
        {
            newIndex = galleryImages.Count - 1; // Wrap to last image
        }
        await ChangeImage(newIndex);
    }

    private async Task NextImage()
    {
        if (isShowingCredits)
        {
            await HideCredits();
            await ChangeImage(0);
            return;
        }

        if (selectedIndex < galleryImages.Count - 1)
        {
            await ChangeImage(selectedIndex + 1);
        }
        else
        {
            await ShowCredits();
        }
    }

    private async Task ChangeImage(int newIndex)
    {
        if (newIndex == selectedIndex) return;
        
        isImageLoading = true;
        StateHasChanged();
        
        try
        {
            // Preload the new image
            await JSRuntime.InvokeVoidAsync("preloadImage", galleryImages[newIndex].FullUrl);
            
            // Small delay to ensure smooth transition
            await Task.Delay(50);
            
            selectedIndex = newIndex;
            isImageLoading = false;
            isShowingCredits = false;
            StateHasChanged();
            
            await ScrollThumbnailIntoView();
        }
        catch
        {
            // If preloading fails, still change the image
            selectedIndex = newIndex;
            isImageLoading = false;
            isShowingCredits = false;
            StateHasChanged();
            await ScrollThumbnailIntoView();
        }
    }

    private void OnImageLoaded()
    {
        isImageLoading = false;
        StateHasChanged();
    }

    private void OnImageError()
    {
        isImageLoading = false;
        StateHasChanged();
    }

    private async Task ScrollThumbnailIntoView()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollThumbnailIntoView", selectedIndex);
        }
        catch
        {
            // Ignore JS interop errors
        }
    }

    private async Task ShowBackHover()
    {
    if (isShowingCredits) return;
    await JSRuntime.InvokeVoidAsync("setGalleryBackground", "gallery/backgrounds/gallery_back_hover.png");
    }

    private async Task ShowNextHover()
    {
    if (isShowingCredits) return;
    await JSRuntime.InvokeVoidAsync("setGalleryBackground", "gallery/backgrounds/gallery_next_hover.png");
    }

    private async Task ShowGalleryDefault()
    {
    await JSRuntime.InvokeVoidAsync("setGalleryBackground", "gallery/gallery_default.png");
    }

    private async Task ShowHomeHover()
    {
    if (isShowingCredits) return;
    await JSRuntime.InvokeVoidAsync("setGalleryBackground", "gallery/backgrounds/gallery_home_hover.png");
    }

    private async Task NavigateHome()
    {
        await JSRuntime.InvokeVoidAsync("navigateWithTransition", "/desktop", "left");
    }

    private async Task ResetToFirstImage()
    {
        if (isShowingCredits)
        {
            await HideCredits();
        }
        await ChangeImage(0);
    }

    private async Task ShowResetHover()
    {
    if (isShowingCredits) return;
    await JSRuntime.InvokeVoidAsync("setGalleryBackground", "gallery/backgrounds/gallery_reset_hover.png");
    }

    private async Task ShowCredits()
    {
    isShowingCredits = true;
    await JSRuntime.InvokeVoidAsync("setGalleryBackground", "gallery/gallery_default.png");
    StateHasChanged();
    }

    private async Task HideCredits()
    {
        isShowingCredits = false;
        await JSRuntime.InvokeVoidAsync("setGalleryBackground", "gallery/gallery_default.png");
        StateHasChanged();

    }

    

    public class GalleryImage
    {
        public string Title { get; set; } = "";
        public string ThumbnailUrl { get; set; } = "";
        public string FullUrl { get; set; } = "";
    }

    private async Task OpenContact()
    {
        await JSRuntime.InvokeVoidAsync("navigateWithTransition", "/desktop/library?openContact=1", "up");
    }
}
